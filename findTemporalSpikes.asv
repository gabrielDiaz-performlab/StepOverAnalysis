function sessionData = findTemporalSpikes(sessionData, audioData, fAudio, Fs, dispData, t_beep)

NumTrials = sessionData.expInfo.numTrials;

N = length(audioData);
Tmax = N/Fs;
dT = 1/Fs;

t = (0:dT:Tmax - dT)';

dF = Fs/N;                              % hertz
f = -Fs/2:dF:Fs/2 - dF; f = f';         % hertz

f_signal = fftshift(fft(audioData));

C = 30*dF;
notch_win = exp(-(f - fAudio).^2/(2*C^2)) + exp(-(f + fAudio).^2/(2*C^2));
notch_win = notch_win/max(notch_win);

f_filt_signal = f_signal.*notch_win;
filt_audioData = real(ifft(fftshift(f_filt_signal)));

if dispData == 1
    figure;
    subplot(2,2,1);plot(f,abs(f_signal));
    subplot(2,2,2);plot(f,abs(f_filt_signal))
    subplot(2,2,3);plot(t,audioData);
    subplot(2,2,4);plot(t,filt_audioData);
    sound(filt_audioData,Fs)
end

filt_audioData = abs(filt_audioData);
filt_audioData = filt_audioData/max(filt_audioData);
thresh_lvl = mean(filt_audioData);

if dispData == 1
   figure;
   plot(t,filt_audioData);hold on
   plot([t(1) t(end)],[thresh_lvl thresh_lvl],'r')
end

spike_down = -ones(round(1000),1); 
spike_down(end/2:end) = 1; 

spikes = double(filt_audioData > thresh_lvl);
beep_up = conv(spikes, spike_down, 'same'); 
figure;plot(beep_up)

[~,idx,~,p] = findpeaks(beep_up,Fs);

end